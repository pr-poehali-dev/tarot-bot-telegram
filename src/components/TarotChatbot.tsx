import { useState, useRef, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import Icon from '@/components/ui/icon';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  card?: TarotCard;
}

interface TarotCard {
  name: string;
  image: string;
  meaning: string;
  keywords: string[];
  reversed?: boolean;
}

const tarotCards: TarotCard[] = [
  {
    name: '–î—É—Ä–∞–∫',
    image: 'üÉè',
    meaning: '–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞. –í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –∂–∏–∑–Ω–∏.',
    keywords: ['–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ', '—Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å', '—Å–≤–æ–±–æ–¥–∞', '–Ω–µ–æ–ø—ã—Ç–Ω–æ—Å—Ç—å']
  },
  {
    name: '–ú–∞–≥',
    image: 'üé©',
    meaning: '–°–∏–ª–∞ –≤–æ–ª–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —É–º–µ–Ω–∏–µ. –£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.',
    keywords: ['—Å–∏–ª–∞ –≤–æ–ª–∏', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ', '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è']
  },
  {
    name: '–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞',
    image: 'üåô',
    meaning: '–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.',
    keywords: ['–∏–Ω—Ç—É–∏—Ü–∏—è', '—Ç–∞–π–Ω–∞', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å', '–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ']
  },
  {
    name: '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞',
    image: 'üëë',
    meaning: '–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ. –í—Ä–µ–º—è –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –∏ –∏–∑–æ–±–∏–ª–∏—è.',
    keywords: ['–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–∑–∞–±–æ—Ç–∞', '–∏–∑–æ–±–∏–ª–∏–µ']
  },
  {
    name: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä',
    image: '‚ö°',
    meaning: '–í–ª–∞—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ. –í—Ä–µ–º—è –≤–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —Å–≤–æ–∏ —Ä—É–∫–∏.',
    keywords: ['–≤–ª–∞—Å—Ç—å', '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ', '–ø–æ—Ä—è–¥–æ–∫']
  },
  {
    name: '–í–ª—é–±–ª–µ–Ω–Ω—ã–µ',
    image: 'üíï',
    meaning: '–õ—é–±–æ–≤—å, –≤—ã–±–æ—Ä, –≥–∞—Ä–º–æ–Ω–∏—è. –í–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ.',
    keywords: ['–ª—é–±–æ–≤—å', '–≤—ã–±–æ—Ä', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '–≥–∞—Ä–º–æ–Ω–∏—è']
  },
  {
    name: '–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã',
    image: 'üé°',
    meaning: '–£–¥–∞—á–∞, –ø–µ—Ä–µ–º–µ–Ω—ã, —Ü–∏–∫–ª—ã. –ü–æ–≤–æ—Ä–æ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –≤–∞—à–µ–π —Å—É–¥—å–±–µ.',
    keywords: ['—É–¥–∞—á–∞', '–ø–µ—Ä–µ–º–µ–Ω—ã', '—Å—É–¥—å–±–∞', '—Ü–∏–∫–ª—ã']
  },
  {
    name: '–ó–≤–µ–∑–¥–∞',
    image: '‚≠ê',
    meaning: '–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å. –í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π.',
    keywords: ['–Ω–∞–¥–µ–∂–¥–∞', '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–º–µ—á—Ç—ã', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å']
  },
  {
    name: '–°–æ–ª–Ω—Ü–µ',
    image: '‚òÄÔ∏è',
    meaning: '–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –ø–æ–∑–∏—Ç–∏–≤. –ü–µ—Ä–∏–æ–¥ —Å—á–∞—Å—Ç—å—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.',
    keywords: ['—Ä–∞–¥–æ—Å—Ç—å', '—É—Å–ø–µ—Ö', '–æ–ø—Ç–∏–º–∏–∑–º', '—ç–Ω–µ—Ä–≥–∏—è']
  },
  {
    name: '–ú–∏—Ä',
    image: 'üåç',
    meaning: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –≥–∞—Ä–º–æ–Ω–∏—è. –£—Å–ø–µ—à–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ —ç—Ç–∞–ø–∞.',
    keywords: ['–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '–≥–∞—Ä–º–æ–Ω–∏—è', '—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å']
  }
];

const TarotChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏, –∏ —è –≤—ã—Ç—è–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è –≤–∞—Å. üîÆ‚ú®',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    if (scrollAreaRef.current) {
      const scrollElement = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollElement) {
        scrollElement.scrollTop = scrollElement.scrollHeight;
      }
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  const getRandomCard = (): TarotCard => {
    const randomIndex = Math.floor(Math.random() * tarotCards.length);
    const card = { ...tarotCards[randomIndex] };
    card.reversed = Math.random() < 0.3; // 30% —à–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—É—é –∫–∞—Ä—Ç—É
    return card;
  };

  const generateResponse = (question: string): string => {
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('–ª—é–±–æ–≤') || lowerQuestion.includes('–æ—Ç–Ω–æ—à–µ–Ω–∏') || lowerQuestion.includes('—Å–µ—Ä–¥—Ü')) {
      return '–í–æ–ø—Ä–æ—Å—ã —Å–µ—Ä–¥—Ü–∞ –≤—Å–µ–≥–¥–∞ —Å–ª–æ–∂–Ω—ã. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–∞–π–Ω—ã –≤–∞—à–∏—Ö —á—É–≤—Å—Ç–≤.';
    }
    
    if (lowerQuestion.includes('—Ä–∞–±–æ—Ç') || lowerQuestion.includes('–∫–∞—Ä—å–µ—Ä') || lowerQuestion.includes('–¥–µ–Ω—å–≥') || lowerQuestion.includes('—Ñ–∏–Ω–∞–Ω—Å')) {
      return '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç –º—É–¥—Ä–æ—Å—Ç–∏. –ü–æ–∑–≤–æ–ª—å—Ç–µ –∫–∞—Ä—Ç–∞–º —É–∫–∞–∑–∞—Ç—å –≤–∞–º –ø—É—Ç—å –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é.';
    }
    
    if (lowerQuestion.includes('–∑–¥–æ—Ä–æ–≤') || lowerQuestion.includes('–±–æ–ª–µ–∑')) {
      return '–¢–µ–ª–æ –∏ –¥—É—Ö —Å–≤—è–∑–∞–Ω—ã. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ.';
    }
    
    if (lowerQuestion.includes('–±—É–¥—É—â') || lowerQuestion.includes('—Å—É–¥—å–±')) {
      return '–ë—É–¥—É—â–µ–µ —Ç—É–º–∞–Ω–Ω–æ, –Ω–æ –∫–∞—Ä—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤–µ—Å—É —Ç–∞–π–Ω—ã.';
    }
    
    const responses = [
      '–í—Å–µ–ª–µ–Ω–Ω–∞—è —É—Å–ª—ã—à–∞–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∑–≤–æ–ª—å—Ç–µ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º.',
      '–≠–Ω–µ—Ä–≥–∏–∏ —Å—Ö–æ–¥—è—Ç—Å—è –≤–æ–∫—Ä—É–≥ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ.',
      '–î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –¢–∞—Ä–æ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à –∑–æ–≤. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É.',
      '–ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏—Ö –º—É–¥—Ä–æ—Å—Ç–∏.',
      '–í–∞—à–∞ –¥—É—à–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∑–Ω–∞–Ω–∏—è. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —Ä–∞—Å–∫—Ä–æ–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Ç—É–∞—Ü–∏–∏.'
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
    setTimeout(() => {
      const card = getRandomCard();
      const response = generateResponse(inputValue);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        sender: 'bot',
        timestamp: new Date(),
        card: card
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Floating Chat Button */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 h-14 w-14 rounded-full bg-gradient-to-r from-mystical-purple to-mystical-purple-light hover:from-mystical-purple-light hover:to-purple-600 shadow-2xl border-0 z-50 animate-pulse"
          size="lg"
        >
          <Icon name="MessageCircle" size={24} className="text-white" />
        </Button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <Card className="fixed bottom-6 right-6 w-96 h-[500px] shadow-2xl border-0 bg-white/95 backdrop-blur-sm z-50 animate-scale-in">
          <div className="flex flex-col h-full">
            {/* Chat Header */}
            <div className="flex items-center justify-between p-4 bg-gradient-to-r from-mystical-purple to-mystical-purple-light rounded-t-lg">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                  <span className="text-xl">üîÆ</span>
                </div>
                <div>
                  <h3 className="font-semibold text-white">–¢–∞—Ä–æ–ª–æ–≥ –ò–ò</h3>
                  <p className="text-xs text-purple-100">–û–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
                className="text-white hover:bg-white/20"
              >
                <Icon name="X" size={18} />
              </Button>
            </div>

            {/* Messages */}
            <ScrollArea ref={scrollAreaRef} className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-[80%] ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
                      <div
                        className={`px-3 py-2 rounded-2xl ${
                          message.sender === 'user'
                            ? 'bg-mystical-purple text-white'
                            : 'bg-gray-100 text-gray-800'
                        }`}
                      >
                        <p className="text-sm">{message.text}</p>
                      </div>
                      
                      {/* Tarot Card */}
                      {message.card && (
                        <div className="mt-2 p-3 bg-gradient-to-br from-mystical-purple-soft to-purple-100 rounded-lg border border-mystical-purple-light/20">
                          <div className="text-center">
                            <div className="text-4xl mb-2 transform hover:scale-110 transition-transform cursor-pointer">
                              {message.card.reversed ? 'üîÑ' : ''} {message.card.image}
                            </div>
                            <h4 className="font-bold text-mystical-purple mb-1">
                              {message.card.name}
                              {message.card.reversed && <span className="text-xs ml-1">(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)</span>}
                            </h4>
                            <p className="text-xs text-gray-600 mb-2">{message.card.meaning}</p>
                            <div className="flex flex-wrap gap-1 justify-center">
                              {message.card.keywords.slice(0, 3).map((keyword, idx) => (
                                <span
                                  key={idx}
                                  className="text-xs bg-mystical-purple/10 text-mystical-purple px-2 py-1 rounded-full"
                                >
                                  {keyword}
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                      )}
                      
                      <p className="text-xs text-gray-400 mt-1 text-right">
                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                  </div>
                ))}
                
                {/* Typing Indicator */}
                {isTyping && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 px-3 py-2 rounded-2xl">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            {/* Input */}
            <div className="p-4 border-t">
              <div className="flex space-x-2">
                <Input
                  ref={inputRef}
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç–∞–º..."
                  className="flex-1 border-mystical-purple/20 focus:border-mystical-purple"
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputValue.trim() || isTyping}
                  className="bg-mystical-purple hover:bg-mystical-purple-light"
                >
                  <Icon name="Send" size={18} />
                </Button>
              </div>
            </div>
          </div>
        </Card>
      )}
    </>
  );
};

export default TarotChatbot;